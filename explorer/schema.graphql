# =============== Block ===================

type Block @entity {
  id: ID!
  height: Int! @index
  hash: String! @index
  parentHash: String!
  timestamp: DateTime! @index
  specVersion: Int! @index
  validator: String @index
  extrinsicsCount: Int!
  callsCount: Int!
  eventsCount: Int!
  extrinsics: [Extrinsic]! @derivedFrom(field: "block")
  calls: [Call]! @derivedFrom(field: "block")
  events: [Event]! @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!
  block: Block
  mainCall: Call
  calls: [Call]! @derivedFrom(field: "extrinsic")
  events: [Event]! @derivedFrom(field: "extrinsic")
  blockNumber: Int @index
  timestamp: DateTime @index
  extrinsicHash: String @index
  indexInBlock: Int
  version: Int @index
  signerPublicKey: String @index
  success: Boolean @index
  error: String
  tip: BigInt
  fee: BigInt
}

type Event @entity @index(fields: ["id","palletName","eventName"]) {
  "Event id - e.g. 0000000001-000000-272d6"
  id: ID!
  block: Block!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  extrinsic: Extrinsic
  call: Call
  indexInBlock: Int
  eventName: String! @index
  palletName: String! @index
  argsStr: [String]
}

type Call @entity @index(fields: ["id","palletName","callName"]) {
  id: ID!
  parentId: String @index
  block: Block!
  extrinsic: Extrinsic
  extrinsicHash: String @index
  blockNumber: Int! @index
  timestamp: DateTime! @index
  callName: String! @index
  palletName: String! @index
  success: Boolean! @index
  callerPublicKey: String @index
  argsStr: [String]
}

type ItemsCounter @entity {
  id: ID!
  type: ItemType! @index
  level: CounterLevel! @index
  total: Int! @index
}

# =============== Account ===================

type Account @entity @index(fields: ["freeBalance", "id"], unique: true) {
  "Native address"
  id: ID!
  evmAddress: String @index
  freeBalance: BigInt! @index
  reservedBalance: BigInt!
  totalBalance: BigInt!
  updatedAt: Int
  rewards: [StakingReward!] @derivedFrom(field: "account")
  identity: Identity @derivedFrom(field: "account")
  sub: IdentitySub @derivedFrom(field: "account")
}

type EvmContract @entity {
  "Address"
  id: ID!
  extrinsicHash: String!
  signer: Account!
  bytecode: String!
  bytecodeContext: String!
  bytecodeArguments: String!
  type: String! @index
  timestamp: Int
}

# =============== Contract verification ===================

type VerifiedContract @entity @index(fields: ["contract", "type"], unique: true) @index(fields: ["contract", "id"], unique: true) {
  "Address"
  id: ID!
  contract: EvmContract!
  name: String! @index
  filename: String @index
  source: JSON!
  optimization: Boolean!
  compilerVersion: String!
  compiledData: JSON!
  args: JSON!
  runs: Int!
  target: String!
  type: String! @index
  contractData: JSON
  license: String
  timestamp: DateTime @index
}

# =============== Transfer ===================

# entity for linking account and transfer
type Transfer @entity {
    id: ID!
    transfer: TokenTransfer
    account: Account!
    denom: String @index
    direction: TransferDirection
}

type TokenTransfer @entity {
    id: ID!
    blockNumber: Int! @index
    timestamp: DateTime! @index
    extrinsicHash: String!
    from: Account!
    to: Account!
    amount: BigInt! @index
    type: TransferType!
    success: Boolean!
}

# =============== Staking ===================

type StakingReward @entity {
    id: ID!
    timestamp: DateTime!
    blockNumber: Int! @index
    extrinsicHash: String @index
    account: Account!
    amount: BigInt!
    era: Int
    validatorId: ID
}

# =============== Identity ===================

type IdentityAdditionalField {
    name: String
    value: String
}

type Identity @entity {
    id: ID!
    account: Account! @unique
    judgement: Judgement!
    subs: [IdentitySub!] @derivedFrom(field: "super")
    additional: [IdentityAdditionalField!]
    display: String
    legal: String
    web: String
    riot: String
    email: String
    pgpFingerprint: String
    image: String
    twitter: String
    isKilled: Boolean!
}

type IdentitySub @entity {
    id: ID!
    super: Identity
    account: Account! @unique
    name: String
}

# ===================== Enums =============================

enum Judgement {
    Unknown
    FeePaid
    Reasonable
    KnownGood
    OutOfDate
    LowQuality
    Erroneous
}

enum TransferType {
  Native, 
  ERC20, 
  ERC721, 
  ERC1155,
  SRC20, 
  SRC721, 
  SRC1155
}

enum TransferDirection {
    From
    To
}

enum CounterLevel {
  Global
  Pallet
  Item
}

enum ItemType {
  Extrinsics
  Calls
  Events
}